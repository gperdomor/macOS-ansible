---
- name: Install Atom packages.
  command: apm install {{ item }}
  args:
    creates: "{{ ansible_env.HOME }}/.atom/packages/{{ item }}"
  with_items: "{{ atom_packages }}"
  when: '"atom" in homebrew_cask_apps'

- name: Install VS Code packages.
  command: code --install-extension {{ item.id | default(item) }}
  with_items: "{{ vscode_packages }}"
  register: vscode_result
  changed_when: "'already installed' not in vscode_result.stdout"
  when: '"visual-studio-code" in homebrew_cask_apps'

- name: Install global Composer packages.
  composer:
    command: "{{ (item.state | default('present') == 'absent') | ternary('remove', 'require') }}"
    arguments: "{{ item.name | default(item) }} {{ item.version | default('@stable') }}"
    # Ansible 2.4 supports `global_command` making `working_dir` optional.
    working_dir: "{{ lookup('env', 'COMPOSER_HOME') | default('~/.composer', true) }}"
  with_items: "{{ composer_packages }}"

- name: Install global NPM packages.
  npm:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
    version: "{{ item.version | default(omit) }}"
    global: yes
    executable: "{{ item.executable | default(omit) }}"
  with_items: "{{ npm_packages }}"
  when: '"node" in homebrew_installed_packages'


- name: Install global Pip packages.
  pip:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
    version: "{{ item.version | default(omit) }}"
    executable: "{{ item.executable | default(omit) }}"
  with_items: "{{ pip_packages }}"

- name: Install global Ruby gems.
  gem:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
    version: "{{ item.version | default(omit) }}"
    user_install: no
    executable: "{{ item.executable | default(omit) }}"
  with_items: "{{ gem_packages }}"
